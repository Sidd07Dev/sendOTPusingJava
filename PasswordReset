


import com.sun.jdi.connect.Transport.*;
import java.util.*;
import javax.mail.Message;
import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import java.util.Properties;
import java.util.Random;
import javax.mail.*;
import javax.mail.internet.*;

public class PasswordReset {

    public static void main(String[] args) {
        String recipientEmail = "receiver@gmail.com";
        String otp = generateOTP();
        
        boolean emailSent = sendEmail(recipientEmail, otp);
        
        if (emailSent) {
            System.out.println("An OTP has been sent to the provided email address.");
            // Further logic to handle OTP verification and password reset
        } else {
            System.out.println("Failed to send the email. Please try again later.");
        }
    }

    private static String generateOTP() {
        // Generate a random 6-digit OTP
        Random random = new Random();
        int otpValue = 100000 + random.nextInt(900000);
        return String.valueOf(otpValue);
    }

    private static boolean sendEmail(String recipientEmail, String otp) {
        String senderEmail = "sender@gmail.com";
        String senderPassword = "password";

        Properties properties = new Properties();
        properties.put("mail.smtp.user",senderEmail);
        properties.put("mail.smtp.password",senderPassword);
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.socketFactory.port","587");
        properties.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
        properties.put("mail.smtp.socketFactory.fallback","false");
        properties.setProperty("mail.smtp.quitwait","false");
        
        
        Authenticator auth=new Authenticator(){
            @Override
            protected PasswordAuthentication getPasswordAuthentication(){
                return new PasswordAuthentication(senderEmail, senderPassword);
            }
        };

        Session session;
        session = Session.getInstance(properties, auth);

        try {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(senderEmail));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
            msg.setSentDate(new Date());
            msg.setSubject("Password Reset OTP");
            msg.setText("Your OTP for password reset is: " + otp);

            Transport.send(msg);
            return true;
        } catch (MessagingException e) {
            e.printStackTrace();
            return false;
        }
    }
}

